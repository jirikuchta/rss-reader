async function api(method, uri, data = null) {
    let init = { method: method };
    if (data) {
        if (method == "GET") {
            let params = new URLSearchParams();
            Object.keys(data).forEach(k => params.append(k, data[k]));
            uri += `?${params.toString()}`;
        }
        else {
            init.body = JSON.stringify(data);
            init.headers = new Headers({ "Content-Type": "application/json" });
        }
    }
    let res = await fetch(uri, init);
    let body = res.status != 204 ? await res.json() : null;
    return {
        ok: res.ok,
        [res.ok ? "data" : "error"]: res.ok ? body : body["error"]
    };
}

const storage = Object.create(null);
function publish(message, publisher, data) {
    let subscribers = storage[message] || [];
    subscribers.forEach((subscriber) => {
        typeof (subscriber) == "function"
            ? subscriber(message, publisher, data)
            : subscriber.handleMessage(message, publisher, data);
    });
}
function subscribe(message, subscriber) {
    if (!(message in storage)) {
        storage[message] = [];
    }
    storage[message].push(subscriber);
}

const counters = new Map();
function init$7() {
    sync$1();
    setInterval(sync$1, 60 * 1000);
}
async function sync$1() {
    let res = await api("GET", "/api/counters/");
    if (!res.ok) {
        return;
    }
    let prevSum = sum();
    counters.clear();
    for (const [id, count] of Object.entries(res.data)) {
        counters.set(Number(id), count);
    }
    prevSum != sum() && publish("counters-updated");
}
function get$2(id) { return counters.get(id); }
function sum() {
    return Array.from(counters.values()).reduce((res, count) => res + count, 0);
}

const subscriptions = new Map();
function init$6() {
    return sync();
}
async function sync() {
    let res = await api("GET", "/api/subscriptions/");
    if (!res.ok) {
        return;
    }
    res.data.forEach(s => subscriptions.set(s.id, s));
    publish("subscriptions-changed");
}
function list$2() { return Array.from(subscriptions.values()); }
function get$1(id) { return subscriptions.get(id); }
async function add$1(data) {
    let res = await api("POST", "/api/subscriptions/", data);
    if (!res.ok) {
        return res;
    }
    subscriptions.set(res.data.id, res.data);
    publish("subscriptions-changed");
    return res;
}
async function edit$1(id, data) {
    let res = await api("PATCH", `/api/subscriptions/${id}/`, data);
    if (!res.ok) {
        return res;
    }
    subscriptions.set(res.data.id, res.data);
    publish("subscriptions-changed");
    return res;
}
async function remove$1(id) {
    let res = await api("DELETE", `/api/subscriptions/${id}/`);
    if (!res.ok) {
        return res;
    }
    subscriptions.delete(id);
    publish("subscriptions-changed");
    return res;
}
async function markRead$2(id) {
    return await api("POST", `/api/subscriptions/${id}/mark-read/`);
}
function isSubscription(entity) {
    return entity.feed_url != undefined;
}

const categories = new Map();
async function init$5() {
    let res = await api("GET", "/api/categories/");
    res.ok && res.data.forEach(s => categories.set(s.id, s));
}
function list$1() { return Array.from(categories.values()); }
function get(id) { return categories.get(id); }
async function add(data) {
    let res = await api("POST", "/api/categories/", data);
    if (!res.ok) {
        return res;
    }
    categories.set(res.data.id, res.data);
    publish("categories-changed");
    return res;
}
async function edit(id, data) {
    let res = await api("PATCH", `/api/categories/${id}/`, data);
    if (!res.ok) {
        return res;
    }
    categories.set(res.data.id, res.data);
    publish("categories-changed");
    return res;
}
async function remove(id) {
    let res = await api("DELETE", `/api/categories/${id}/`);
    if (!res.ok) {
        return res;
    }
    categories.delete(id);
    sync();
    publish("categories-changed");
    return res;
}
async function markRead$1(id) {
    let res = await api("POST", `/api/categories/${id}/mark-read/`);
    res.ok && sync$1();
}

var icons = {
    "check": `<svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M13.854 3.646a.5.5 0 010 .708l-7 7a.5.5 0 01-.708 0l-3.5-3.5a.5.5 0 11.708-.708L6.5 10.293l6.646-6.647a.5.5 0 01.708 0z" clip-rule="evenodd"/></svg>`,
    "check-all": `<svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M12.354 3.646a.5.5 0 010 .708l-7 7a.5.5 0 01-.708 0l-3.5-3.5a.5.5 0 11.708-.708L5 10.293l6.646-6.647a.5.5 0 01.708 0z" clip-rule="evenodd"/><path d="M6.25 8.043l-.896-.897a.5.5 0 10-.708.708l.897.896.707-.707zm1 2.414l.896.897a.5.5 0 00.708 0l7-7a.5.5 0 00-.708-.708L8.5 10.293l-.543-.543-.707.707z"/></svg>`,
    "chevron-down": `<svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M1.646 4.646a.5.5 0 01.708 0L8 10.293l5.646-5.647a.5.5 0 01.708.708l-6 6a.5.5 0 01-.708 0l-6-6a.5.5 0 010-.708z" clip-rule="evenodd"/></svg>`,
    "cross": `<svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M11.854 4.146a.5.5 0 010 .708l-7 7a.5.5 0 01-.708-.708l7-7a.5.5 0 01.708 0z" clip-rule="evenodd"/><path fill-rule="evenodd" d="M4.146 4.146a.5.5 0 000 .708l7 7a.5.5 0 00.708-.708l-7-7a.5.5 0 00-.708 0z" clip-rule="evenodd"/></svg>`,
    "dots-horizontal": `<svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M3 9.5a1.5 1.5 0 110-3 1.5 1.5 0 010 3zm5 0a1.5 1.5 0 110-3 1.5 1.5 0 010 3zm5 0a1.5 1.5 0 110-3 1.5 1.5 0 010 3z" clip-rule="evenodd"/></svg>`,
    "pencil": `<svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M11.293 1.293a1 1 0 011.414 0l2 2a1 1 0 010 1.414l-9 9a1 1 0 01-.39.242l-3 1a1 1 0 01-1.266-1.265l1-3a1 1 0 01.242-.391l9-9zM12 2l2 2-9 9-3 1 1-3 9-9z" clip-rule="evenodd"/><path fill-rule="evenodd" d="M12.146 6.354l-2.5-2.5.708-.708 2.5 2.5-.707.708zM3 10v.5a.5.5 0 00.5.5H4v.5a.5.5 0 00.5.5H5v.5a.5.5 0 00.5.5H6v-1.5a.5.5 0 00-.5-.5H5v-.5a.5.5 0 00-.5-.5H3z" clip-rule="evenodd"/></svg>`,
    "plus-circle": `<svg viewBox="0 0 16 16" fill="currentColor"><path fill-rule="evenodd" d="M8 3.5a.5.5 0 01.5.5v4a.5.5 0 01-.5.5H4a.5.5 0 010-1h3.5V4a.5.5 0 01.5-.5z" clip-rule="evenodd"/><path fill-rule="evenodd" d="M7.5 8a.5.5 0 01.5-.5h4a.5.5 0 010 1H8.5V12a.5.5 0 01-1 0V8z" clip-rule="evenodd"/><path fill-rule="evenodd" d="M8 15A7 7 0 108 1a7 7 0 000 14zm0 1A8 8 0 108 0a8 8 0 000 16z" clip-rule="evenodd"/></svg>`,
    "trash": `<svg viewBox="0 0 16 16"><path d="M5.5 5.5A.5.5 0 016 6v6a.5.5 0 01-1 0V6a.5.5 0 01.5-.5zm2.5 0a.5.5 0 01.5.5v6a.5.5 0 01-1 0V6a.5.5 0 01.5-.5zm3 .5a.5.5 0 00-1 0v6a.5.5 0 001 0V6z"/><path fill-rule="evenodd" d="M14.5 3a1 1 0 01-1 1H13v9a2 2 0 01-2 2H5a2 2 0 01-2-2V4h-.5a1 1 0 01-1-1V2a1 1 0 011-1H6a1 1 0 011-1h2a1 1 0 011 1h3.5a1 1 0 011 1v1zM4.118 4L4 4.059V13a1 1 0 001 1h6a1 1 0 001-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" clip-rule="evenodd"/></svg>`
};

const SVGNS = "http://www.w3.org/2000/svg";
function node$4(name, attrs, content, parent) {
    let n = document.createElement(name);
    Object.assign(n, attrs);
    content && text(content, n);
    parent && parent.appendChild(n);
    return n;
}
function clear(node) {
    while (node.firstChild) {
        node.removeChild(node.firstChild);
    }
    return node;
}
function text(txt, parent) {
    let n = document.createTextNode(txt);
    parent && parent.appendChild(n);
    return n;
}
function button(attrs, content, parent) {
    let result = node$4("button", attrs, content, parent);
    if (attrs && attrs.icon) {
        let i = icon(attrs.icon);
        result.insertBefore(i, result.firstChild);
    }
    return result;
}
function svg(name, attrs = {}) {
    let node = document.createElementNS(SVGNS, name);
    for (let name in attrs) {
        node.setAttribute(name, attrs[name]);
    }
    return node;
}
function icon(type, title = "", parent) {
    let str = icons[type];
    if (!str) {
        console.error("Bad icon type '%s'", type);
        return node$4("span", {}, "â€½");
    }
    let tmp = node$4("div");
    tmp.innerHTML = str;
    let s = tmp.querySelector("svg");
    if (!s) {
        throw new Error(`Bad icon source for type '${type}'`);
    }
    s.classList.add("icon");
    s.classList.add(`icon-${type}`);
    if (title) {
        let t = svg("title");
        text(title, t);
        s.insertAdjacentElement("afterbegin", t);
    }
    parent && parent.appendChild(s);
    return s;
}
function fragment() {
    return document.createDocumentFragment();
}

function build$3(subscription) {
    let node = node$4("span", { className: "subscription-icon" });
    let img = new Image();
    img.onload = () => {
        img.width == 1 && (node.dataset.content = subscription.title[0]);
        img.width > 1 && node.appendChild(img);
    };
    img.src = `/feed-icon/${subscription.id}/`;
    return node;
}

function id() {
    return `i${Math.random().toString(36).substr(2, 9)}`;
}

class SubscriptionForm {
    constructor(subscription) {
        this._subscription = subscription;
        this._build();
        this.node.addEventListener("submit", this);
    }
    async handleEvent(e) {
        var _a;
        if (e.type == "submit") {
            e.preventDefault();
            let data = {
                title: this._title.value,
                feed_url: this._url.value,
                category_id: (_a = (await getCategory(this._category.value))) === null || _a === void 0 ? void 0 : _a.id
            };
            let res;
            if (this._subscription) {
                res = await edit$1(this._subscription.id, data);
            }
            else {
                res = await add$1(data);
            }
            this._validate(res);
            this.node.checkValidity() && this.afterSubmit();
        }
    }
    afterSubmit() { }
    _build() {
        this.node = node$4("form", { id: id() });
        this.node.noValidate = true;
        this.submitBtn = button({ type: "submit" }, "Submit");
        this.submitBtn.setAttribute("form", this.node.id);
        this._title = node$4("input", { type: "text", required: "true" });
        this._url = node$4("input", { type: "url", required: "true" });
        this._category = node$4("input", { type: "text" });
        if (this._subscription) {
            this._title.value = this._subscription.title;
            this._url.value = this._subscription.feed_url;
            this._url.disabled = true;
            if (this._subscription.category_id) {
                let cat = get(this._subscription.category_id);
                cat && (this._category.value = cat.title);
            }
        }
        this._subscription && this.node.appendChild(labelInput$1("Title", this._title));
        this.node.appendChild(labelInput$1("Feed URL", this._url));
        this.node.appendChild(labelInput$1("Category", this._category));
        let categoryList = buildCategoryList();
        this._category.setAttribute("list", categoryList.id);
        this.node.appendChild(categoryList);
    }
    _validate(res) {
        var _a;
        this._clearValidation();
        switch ((_a = res.error) === null || _a === void 0 ? void 0 : _a.code) {
            case "missing_field":
                let msg = "Please fill out this field.";
                res.error.field == "title" && this._title.setCustomValidity(msg);
                res.error.field == "uri" && this._url.setCustomValidity(msg);
                break;
            case "invalid_field":
                res.error.field == "categoryId" && this._category.setCustomValidity("Category not found.");
                break;
            case "parser_error":
                this._url.setCustomValidity("No valid RSS/Atom feed found.");
                break;
            case "already_exists":
                this._url.setCustomValidity("You are already subscribed to this feed.");
                break;
            case "ambiguous_feed_url":
                this._feedSelect = node$4("select");
                node$4("option", { value: this._url.value }, "Select feedâ€¦", this._feedSelect);
                res.error.links.forEach(l => node$4("option", { value: l.href }, l.title || l.href, this._feedSelect));
                this._feedSelect.addEventListener("change", e => this._url.value = this._feedSelect.value);
                this._url.parentNode.insertBefore(this._feedSelect, this._url.nextSibling);
                this._feedSelect.setCustomValidity("Provided URL is a HTML page referencing multiple feeds.");
                break;
        }
        this.node.classList.toggle("invalid", !this.node.checkValidity());
        this.node.reportValidity();
    }
    _clearValidation() {
        var _a;
        (_a = this._feedSelect) === null || _a === void 0 ? void 0 : _a.remove();
        this._title.setCustomValidity("");
        this._url.setCustomValidity("");
        this._category.setCustomValidity("");
    }
}
function labelInput$1(text, input) {
    let label = node$4("label", {}, text);
    input.required && label.classList.add("required");
    let id$1 = id();
    label.setAttribute("for", id$1);
    input.setAttribute("id", id$1);
    let frag = fragment();
    frag.appendChild(label);
    frag.appendChild(input);
    return frag;
}
function buildCategoryList() {
    let node = node$4("datalist", { id: id() });
    list$1().forEach(c => node$4("option", { value: c.title }, c.title, node));
    return node;
}
async function getCategory(title) {
    title = title.trim();
    if (!title) {
        return;
    }
    let category = list$1().find(cat => cat.title.trim().toLowerCase() == title.toLowerCase());
    if (!category) {
        let res = await add({ title });
        res.ok && (category = res.data);
    }
    return category;
}

class CategoryForm {
    constructor(category) {
        this._category = category;
        this._build();
        this.node.addEventListener("submit", this);
    }
    async handleEvent(e) {
        if (e.type == "submit") {
            e.preventDefault();
            let res = await edit(this._category.id, {
                title: this._title.value
            });
            this._validate(res);
            this.node.checkValidity() && this.afterSubmit();
        }
    }
    afterSubmit() { }
    _build() {
        this.node = node$4("form", { id: id() });
        this.node.noValidate = true;
        this.submitBtn = button({ type: "submit" }, "Submit");
        this.submitBtn.setAttribute("form", this.node.id);
        this._title = node$4("input", { type: "text", required: "true", value: this._category.title });
        this.node.appendChild(labelInput("Title", this._title));
    }
    _validate(res) {
        var _a;
        this._clearValidation();
        switch ((_a = res.error) === null || _a === void 0 ? void 0 : _a.code) {
            case "missing_field":
                this._title.setCustomValidity("Please fill out this field.");
                break;
            case "already_exists":
                this._title.setCustomValidity(`Title already exists.`);
                break;
        }
        this.node.classList.toggle("invalid", !this.node.checkValidity());
        this.node.reportValidity();
    }
    _clearValidation() {
        this._title.setCustomValidity("");
    }
}
function labelInput(text, input) {
    let label = node$4("label", {}, text);
    input.required && label.classList.add("required");
    let id$1 = id();
    label.setAttribute("for", id$1);
    input.setAttribute("id", id$1);
    let frag = fragment();
    frag.appendChild(label);
    frag.appendChild(input);
    return frag;
}

let current = null;
class Dialog {
    constructor() {
        this.node = node$4("div", { id: "dialog" });
    }
    open() {
        current === null || current === void 0 ? void 0 : current.close();
        current = this;
        document.body.classList.add("with-dialog");
        document.body.appendChild(this.node);
    }
    close() {
        var _a;
        current = null;
        document.body.classList.remove("with-dialog");
        (_a = this.node.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.node);
        this.onClose();
    }
    onClose() { }
    closeButton() {
        let button$1 = button({ icon: "cross", className: "close" });
        button$1.addEventListener("click", e => this.close());
        return button$1;
    }
}
async function confirm(text, ok, cancel) {
    let dialog = new Dialog();
    let header = node$4("header", {}, "", dialog.node);
    header.appendChild(dialog.closeButton());
    node$4("h3", {}, text, header);
    let footer = node$4("footer", {}, "", dialog.node);
    let btnOk = button({ type: "submit" }, ok || "OK", footer);
    let btnCancel = button({ type: "button" }, cancel || "Cancel", footer);
    dialog.open();
    return new Promise(resolve => {
        dialog.onClose = () => resolve(false);
        btnOk.addEventListener("click", e => {
            resolve(true);
            dialog.close();
        });
        btnCancel.addEventListener("click", e => dialog.close());
    });
}
window.addEventListener("keydown", e => e.keyCode == 27 && (current === null || current === void 0 ? void 0 : current.close()));

const SELECTED_CSS_CLASS$1 = "is-selected";
const node$3 = node$4("nav");
let selected$1;
let items = [];
function init$4() {
    build$2();
    // FIXME: may cause two consecutive builds
    subscribe("subscriptions-changed", build$2);
    subscribe("categories-changed", build$2);
    subscribe("counters-updated", updateCounters);
}
async function build$2() {
    clear(node$3);
    items = [];
    let header = node$4("header", {}, "", node$3);
    node$4("h3", {}, "Subscriptions", header);
    let btn = button({ icon: "plus-circle" }, "", header);
    btn.addEventListener("click", e => editSubscription());
    list$1().forEach(c => node$3.appendChild(buildCategory(c)));
    let uncategorized = node$4("ul", {}, "", node$3);
    list$2()
        .filter(s => s.category_id === null)
        .forEach(s => {
        let item = new Item(s);
        uncategorized.appendChild(item.node);
        items.push(item);
    });
    updateCounters();
}
function buildCategory(category) {
    let list = node$4("ul");
    let categoryItem = new Item(category);
    list.appendChild(categoryItem.node);
    items.push(categoryItem);
    list$2()
        .filter(s => s.category_id == category.id)
        .forEach(s => {
        let item = new Item(s);
        list.appendChild(item.node);
        items.push(item);
    });
    return list;
}
function buildButtons(entity) {
    let frag = fragment();
    let dotsBtn = button({ icon: "dots-horizontal", className: "btn-dots" }, "", frag);
    dotsBtn.addEventListener("click", e => {
        e.stopPropagation();
        dotsBtn.classList.toggle("active");
    });
    let editBtn = button({ icon: "pencil", title: "Edit" }, "", frag);
    editBtn.addEventListener("click", e => {
        e.stopPropagation();
        if (isSubscription(entity)) {
            editSubscription(entity);
        }
        else {
            editCategory(entity);
        }
    });
    let checkBtn = button({ icon: "check-all", title: "Mark as read" }, "", frag);
    checkBtn.addEventListener("click", e => {
        e.stopPropagation();
        if (isSubscription(entity)) {
            markRead$2(entity.id);
        }
        else {
            markRead$1(entity.id);
        }
    });
    return frag;
}
function selectItem$1(item) {
    var _a;
    (_a = node$3.querySelector(`.${SELECTED_CSS_CLASS$1}`)) === null || _a === void 0 ? void 0 : _a.classList.remove(SELECTED_CSS_CLASS$1);
    item.node.classList.add(SELECTED_CSS_CLASS$1);
    selected$1 = item;
    publish("nav-item-selected");
}
function updateCounters() {
    items.forEach(i => i.updateCounter());
}
class Item {
    constructor(data) {
        this.data = data;
    }
    get node() {
        if (this._node) {
            return this._node;
        }
        let node = node$4("li");
        let counter = node.appendChild(node$4("span", { className: "count" }));
        if (this.type == "subscription") {
            node.appendChild(build$3(this.data));
        }
        else {
            node.classList.add("category");
            let btn = button({ icon: "chevron-down", className: "plain btn-chevron" }, "", node);
            btn.addEventListener("click", e => {
                e.stopPropagation();
                node.classList.toggle("is-collapsed");
            });
        }
        node.appendChild(node$4("span", { className: "title" }, this.data.title));
        node.appendChild(buildButtons(this.data));
        node.appendChild(counter);
        this._node = node;
        this.counter = counter;
        this.updateCounter();
        node.addEventListener("click", e => selectItem$1(this));
        return this._node;
    }
    get id() {
        return this.data.id;
    }
    get type() {
        return isSubscription(this.data) ? "subscription" : "category";
    }
    updateCounter() {
        if (!this.counter) {
            return;
        }
        clear(this.counter);
        let count = 0;
        if (this.type == "category") {
            count = list$2()
                .filter(s => s.category_id == this.id)
                .reduce((total, s) => total + (get$2(s.id) || 0), 0);
        }
        else {
            count = get$2(this.id) || 0;
        }
        this.counter.appendChild(text(`${count || ""}`));
    }
}
function editSubscription(subscription) {
    let dialog = new Dialog();
    let subscriptionForm = new SubscriptionForm(subscription);
    subscriptionForm.afterSubmit = () => dialog.close();
    let header = node$4("header", {}, `${subscription ? "Edit" : "Add"} subscription`, dialog.node);
    header.appendChild(dialog.closeButton());
    dialog.node.appendChild(subscriptionForm.node);
    let footer = node$4("footer", {}, "", dialog.node);
    footer.appendChild(subscriptionForm.submitBtn);
    if (subscription) {
        let deleteBtn = button({ className: "plain delete", "icon": "trash" }, "Unsubscribe", footer);
        deleteBtn.addEventListener("click", e => deleteSubscription(subscription));
    }
    dialog.open();
}
function editCategory(category) {
    let dialog = new Dialog();
    let categoryForm = new CategoryForm(category);
    categoryForm.afterSubmit = () => dialog.close();
    let header = node$4("header", {}, "Edit category", dialog.node);
    header.appendChild(dialog.closeButton());
    dialog.node.appendChild(categoryForm.node);
    let footer = node$4("footer", {}, "", dialog.node);
    footer.appendChild(categoryForm.submitBtn);
    let deleteBtn = button({ className: "plain delete", "icon": "trash" }, "Delete category", footer);
    deleteBtn.addEventListener("click", e => deleteCategory(category));
    dialog.open();
}
async function deleteCategory(category) {
    if (await confirm(`Delete category ${category.title}? Any nested subscriptions will be moved to uncategorized.`)) {
        remove(category.id);
    }
}
async function deleteSubscription(subscription) {
    if (await confirm(`Unsubscribe from ${subscription.title}?`)) {
        remove$1(subscription.id);
    }
}

async function list(filters) {
    let res = await api("GET", "/api/articles/", filters);
    res.data.forEach(a => a.time_published = new Date(a.time_published));
    return res.data;
}
async function markRead(articles) {
    let res = await api("POST", "/api/articles/mark-read/", { ids: articles.map(a => a.id) });
    res.ok && sync$1();
}

function date(d) {
    let today = new Date;
    let date_str = d.toLocaleDateString();
    let time_str = d.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
    if (d.getMonth() == today.getMonth() && d.getFullYear() == today.getFullYear()) {
        if (d.getDate() == today.getDate()) {
            date_str = "today";
        }
        if (d.getDate() == today.getDate() - 1) {
            date_str = "yesterday";
        }
    }
    return `${date_str} ${time_str}`;
}

const SELECTED_CSS_CLASS = "is-selected";
const READ_CSS_CLASS = "is-read";
const node$2 = node$4("section", { "id": "list" });
let selected;
const observer = new IntersectionObserver(entries => entries[0].isIntersecting && buildItems(), { root: node$2, rootMargin: "0% 0% 33% 0%", threshold: 1 });
function init$3() {
    build$1();
    subscribe("nav-item-selected", build$1);
}
async function build$1() {
    clear(node$2);
    buildItems();
}
async function buildItems() {
    observer.disconnect();
    let items = await list(get_filters());
    if (items.length) {
        items.forEach(article => node$2.appendChild(buildItem(article)));
        observer.observe(node$2.querySelector("article:last-child"));
    }
}
function buildItem(article) {
    let subscription = get$1(article.subscription_id);
    if (!subscription) {
        return fragment();
    }
    let node = node$4("article");
    node.addEventListener("click", _ => selectItem(node, article));
    let header = node$4("header", {}, "", node);
    header.appendChild(build$3(subscription));
    header.appendChild(node$4("h6", {}, subscription.title));
    header.appendChild(node$4("time", {}, date(article.time_published)));
    node.appendChild(node$4("h3", {}, article.title));
    node.appendChild(node$4("p", {}, article.summary));
    return node;
}
function get_filters() {
    let filters = {
        unread_only: true,
        offset: node$2.querySelectorAll(`article:not(.${READ_CSS_CLASS})`).length
    };
    if (selected$1) {
        if (selected$1.type == "subscription") {
            filters["subscription_id"] = selected$1.id;
        }
        else {
            filters["category_id"] = selected$1.id;
        }
    }
    return filters;
}
async function selectItem(itemNode, article) {
    var _a;
    (_a = node$2.querySelector(`.${SELECTED_CSS_CLASS}`)) === null || _a === void 0 ? void 0 : _a.classList.remove(SELECTED_CSS_CLASS);
    itemNode.classList.add(SELECTED_CSS_CLASS);
    itemNode.classList.add(READ_CSS_CLASS);
    selected = article;
    publish("article-selected");
}

const node$1 = node$4("section", { "id": "detail" });
function init$2() {
    build();
    subscribe("article-selected", build);
}
async function build() {
    if (!selected) {
        return;
    }
    clear(node$1);
    let frag = fragment();
    let header = node$4("header", {}, "", frag);
    let title = node$4("h1", {}, "", header);
    node$4("a", { href: selected.url, target: "_blank", rel: "noopener noreferrer" }, selected.title, title);
    let content = node$4("div", {}, "", frag);
    content.innerHTML = selected.content || selected.summary || "";
    node$1.appendChild(frag);
    markRead([selected]);
}

let node = document.querySelector("main");
async function init$1() {
    init$4();
    init$3();
    init$2();
    node.appendChild(node$3);
    node.appendChild(node$2);
    node.appendChild(node$1);
    new Resizer(node$3, "sidebar-width");
    new Resizer(node$2, "articles-width");
}
class Resizer {
    constructor(node, storageId) {
        this._node = node;
        this._storageId = storageId;
        this._build();
    }
    _build() {
        let node = node$4("div", { className: "resizer" });
        node.addEventListener("mousedown", this);
        this._node.insertAdjacentElement("afterend", node);
        this._load();
    }
    handleEvent(ev) {
        switch (ev.type) {
            case "mousedown":
                document.addEventListener("mousemove", this);
                document.addEventListener("mouseup", this);
                document.body.style.userSelect = "none";
                break;
            case "mouseup":
                document.removeEventListener("mousemove", this);
                document.removeEventListener("mouseup", this);
                document.body.style.userSelect = "";
                this._save();
                break;
            case "mousemove":
                this._resize(ev.clientX);
                break;
        }
    }
    _resize(pos) {
        let widthPx = pos - this._node.offsetLeft;
        let widthPerc = (widthPx / document.body.offsetWidth) * 100;
        this._node.style.flexBasis = `${widthPerc}%`;
    }
    _save() {
        let widthPerc = (this._node.offsetWidth / document.body.offsetWidth) * 100;
        this._storageId && localStorage.setItem(this._storageId, `${widthPerc}`);
    }
    _load() {
        let widthPerc = this._storageId && localStorage.getItem(this._storageId);
        widthPerc && (this._node.style.flexBasis = `${widthPerc}%`);
    }
}

async function init() {
    await init$5();
    await init$6();
    init$7();
    init$1();
}
init();
